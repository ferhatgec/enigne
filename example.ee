include $"header.ee"

print(file_name, " ", :boolstr(false), " ", :boolstr(true), "\n");

global primes = [2, 3, 5, 7, 11, 13, 17, 19];
global gech = "gech";

global array = [primes.0, [primes.1]];
global copy_element = array.1; # there's no still array.0.n; like syntax.

print(to_string(50), " ",
      to_string("50"),
      "\n");

print(to_int(50), " ",
      to_int("50"),
      "\n");


enum = 
  Undefined,
  String,
  Decimal,
  Array
;

f :type_of_to_string =
 global __data = type_of($0);

 if __data equal_to String =
  return "string";
 ; elif __data equal_to Decimal =
  return "decimal";
 ; elif __data equal_to Array =
  return "array";
 ;

 return "";
;
    
print(type_of(50), " ",
      type_of("50"), " ",
      type_of(["50"]), " ",
      type_of(30 + 20), " ",
      type_of(), " ",
      :type_of_to_string(50), " ",
      :type_of_to_string("50"), " ",
      :type_of_to_string(["50"]), " ",
      :type_of_to_string(30 + 20), " ",
      :type_of_to_string(), " ",
      "\n");

print(copy_element, "\n");
print(copy_element.0, "\n");

global x = "";
~x = array.1;

print(x, "\n");

delete "x";

print(x, "\n");

enum =
  Zero,
  One,
  Two,
  Three,
  Four,
  Five,
  Six,
  Seven,
  Eight,
  Nine,
  TheseDigitsAreEnoughForDoingMath
;

if (Zero is_in [Zero, One, Two, Three, Four]) equal_to true =
 print("(Zero is_in [Zero, One, Two, Three, Four]) equal_to true\n");
;

print(Zero, One, Two, Three, Four, Five, Six, Seven, Eight, Nine, "\n");

if (((One equal_to One) and (Two equal_to Two))
    or (Nine equal_to Zero)) equal_to true =
 print("(((One equal_to One) and (Two equal_to Two)) or (Nine equal_to Zero)) equal_to true\n");
;


if (primes.0 + primes.1) equal_to primes.2 =
 print(gech.0 + gech.1 + gech.2 + gech.3 + gech.4 + gech.5, "\n");
;

print(len(primes), " ", len(gech), "\n");

if argc equal_to 1 =
 print(arg_0 + " - file reader\n",
      "--------------------------\n",
      arg_0 + " file\n");
; else =
 if is_file(arg_1) equal_to true =
  global data = read_file(arg_1);
  print(data);
 ; elif path_exists(arg_1) equal_to true =
  print(arg_1 + " seems like not a file\n");
 ; else =
  print(arg_1 + " seems not in this directory\n");
 ;
;


f :split =
 global __var_index = 1;
 global __split_keyword = "";
 global __split_result = [];
 global __lock_data = $0;

 loopif __var_index not_equal_to len($0) + 1 =
  if __lock_data.(__var_index) equal_to " " =
   ~__split_result = __split_result + __split_keyword;
   ~__split_keyword = "";
  ; else =
   ~__split_keyword = __split_keyword + __lock_data.(__var_index);
  ;

  ~__var_index = __var_index + 1;
 ;

 ~__split_result = __split_result + __split_keyword;

 return __split_result;
;

print(:split("Hello dear splitter guy"), "\n");

f :input =
 global var = "";
 global ch = "";

 loopif ch not_equal_to "\n" =
  ~ch = char_input();
  print(ch);
  ~var = var + ch;
 ;

 return var;
;

print(len("Hello world\n"), "\n");
print(abs(-3), " ", abs(0), " ", abs(3), " ", abs(-3.7), " ", abs(3.7), "\n");
print(ceil(3.7), " ", floor(3.7), "\n");
print(log(16, 2), " ", log(0, 0), " ", log(16, 1), "\n");
print(sqrt(16), " ", sqrt(2), " ", sqrt(-1), "\n");
print(pi(), " ", e(), " ", pi() * e(), "\n");
print(to_lower("ENIGNE"), " ",
      to_upper("lang"), " ",
      starts_with("enigne"), " ",
      ends_with("enigne"), " ",
      starts_with("enigne") equal_to ends_with("enigne"), "\n");

print("type something: ", :input());

print("press any key to continue", char_input(), "\n");

exit();

print("hmmmm\n");